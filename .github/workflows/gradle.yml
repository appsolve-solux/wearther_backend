name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # application.properties 파일 동적으로 생성
      - name: Generate application.properties
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties
          shell: bash

      # Gradle wrapper에 실행 권한 부여
      - name: Give Gradle wrapper execute permissions
        run: chmod +x ./gradlew

      # Gradle 최적화 및 캐싱
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      # Gradle로 빌드 실행
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      # Docker 로그인
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_REPOSITORY }} -f ./Dockerfile .
          docker tag ${{ secrets.DOCKERHUB_REPOSITORY }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment..."
            cd ~/wearther_backend
            echo "Pulling latest changes from main branch..."
            git pull origin main
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
            echo "Setting environment variables..."
            echo "POSTGRES_DB=${{ secrets.DB_NAME }}" > .env
            echo "POSTGRES_USER=${{ secrets.DB_USERNAME }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}" >> .env
            echo "Starting Docker containers with docker-compose..."
            docker-compose --env-file .env up -d
            echo "Deployment completed successfully!"
          timeout: 60m
